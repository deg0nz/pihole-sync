name: Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release - ${{ matrix.target }}
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            archive-name: pihole-sync-x86_64-linux.tar.gz
          - target: aarch64-unknown-linux-gnu
            archive-name: pihole-sync-arm64-linux.tar.gz
            cross-pkgs: "gcc-aarch64-linux-gnu pkg-config libssl-dev:arm64"
          - target: armv7-unknown-linux-gnueabihf
            archive-name: pihole-sync-armv7-linux.tar.gz
            cross-pkgs: "gcc-arm-linux-gnueabihf pkg-config libssl-dev:armhf"

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies for host
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libssl3

      - name: Install cross-compilation dependencies
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo dpkg --add-architecture armhf
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.cross-pkgs }} libssl3:armhf libssl3:arm64

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.archive-name }} pihole-sync
          cd -

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.archive-name }}
          asset_name: ${{ matrix.archive-name }}
          asset_content_type: application/gzip
